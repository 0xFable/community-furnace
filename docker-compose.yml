version: "3.1"
services:

  # Local Migaloo chain
  init-migaloo-genesis:
    build:
      context: ./local-migaloo
    entrypoint:
      - sh
    command:
      - -c
      - "if [ -e /root/.migalood/config/genesis.json ]; then echo \"Genesis exists\"; else /config.sh; fi"
    volumes:
      - "./.migalood:/root/.migalood"
  local-migaloo:
    build:
      context: ./local-migaloo
    environment:
      - RUN_LOCAL=true
    ports:
      - "1317:1317"
      - "26657:26657"
    volumes:
      - "./.migalood:/root/.migalood"
    healthcheck:
      test: ["CMD", "sh", "-c", "curl http://localhost:26657/abci_info? 2>/dev/null | grep -q 'last_block_height'"]
      interval: 2s
      timeout: 5s
    depends_on:
      init-migaloo-genesis:
        condition: service_completed_successfully

  build-contract:
    image: cosmwasm/rust-optimizer:0.12.13
    volumes:
      - type: bind
        source: ./
        target: /code
      - type: volume
        source: white_whale_furnace_cache
        target: /code/target
      - type: volume
        source: registry_cache
        target: /usr/local/cargo/registry
  upload-contract:
    build:
      context: ./local-migaloo
    entrypoint:
      - "upload"
    volumes:
      - "./scripts/upload_to_local_in_compose.sh:/usr/local/bin/upload"
      - "./.migalood:/root/.migalood"
      - "./artifacts:/artifacts"
      - "./public/config.json:/public/config.json"
    depends_on:
      build-contract:
        condition: service_completed_successfully
      local-migaloo:
        condition: service_healthy

  # Burn from temporary accounts does not run by default.
  # run with   docker-compose --profile burner up
  # or if local chain is running  docker-compose up burner-accounts
  burner-accounts:
    build:
      context: ./local-migaloo
    profiles:
      - burner
    entrypoint:
      - "burn"
    volumes:
      - "./scripts/burn_multiple_accounts.sh:/usr/local/bin/burn"
      - "./.migalood:/root/.migalood"
      - "./public/config.json:/public/config.json"
    depends_on:

      local-migaloo:
        condition: service_healthy

  frontend:
    image: node:18
    environment:
      - NODE_ENV=development
    command:
      - npm
      - run
      - dev
    ports:
      - "3000:3000"
    working_dir: /app
    volumes:
      - ".:/app"
    depends_on:
      upload-contract:
        condition: service_completed_successfully

#  SubQuery stack

  subquery-node-build:
    image: onfinality/subql-node-cosmos:latest
    volumes:
      - ./subql/:/app
    working_dir: /app
    entrypoint:
      - sh
    command:
      - -c
      - npm install ; npm run-script codegen ; npm run-script build

  postgres:
    build:
      context: ./subql/
      dockerfile: ./docker/pg-Dockerfile
    ports:
      - 5432:5432
    volumes:
      - ./subql/.data/postgres:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: postgres
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -U postgres" ]
      interval: 5s
      timeout: 5s
      retries: 5

  subquery-node:
    image: onfinality/subql-node-cosmos:latest
    depends_on:
      "postgres":
        condition: service_healthy
      local-migaloo:
        condition: service_healthy
      subquery-node-build:
        condition: service_completed_successfully
    restart: always
    environment:
      DB_USER: postgres
      DB_PASS: postgres
      DB_DATABASE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
    volumes:
      - ./subql/:/app
    command:
      - ${SUB_COMMAND} # set SUB_COMMAND env variable to "test" to run tests
      - -f=/app
      - --db-schema=app
    healthcheck:
      test: [ "CMD", "curl", "-f", "http://subquery-node:3000/ready" ]
      interval: 3s
      timeout: 5s
      retries: 10

  graphql-engine:
    image: onfinality/subql-query:latest
    ports:
      - 3050:3000
    depends_on:
      "postgres":
        condition: service_healthy
      "subquery-node":
        condition: service_healthy
    restart: always
    environment:
      DB_USER: postgres
      DB_PASS: postgres
      DB_DATABASE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
    command:
      - --name=app
      # UI app for developing queries
      # - --playground
      - --indexer=http://subquery-node:3000

  graphql-playground:
    image: onfinality/subql-query:latest
    ports:
      - 3060:3000
    depends_on:
      "postgres":
        condition: service_healthy
      "subquery-node":
        condition: service_healthy
    restart: always
    environment:
      DB_USER: postgres
      DB_PASS: postgres
      DB_DATABASE: postgres
      DB_HOST: postgres
      DB_PORT: 5432
    command:
      - --name=app
      # UI app for developing queries
      - --playground
      - --indexer=http://subquery-node:3000

volumes:
  white_whale_furnace_cache:
  registry_cache:
